#!/bin/bash

COMMAND=$1
SCRIPTS_DIR="$(cd "$(dirname "$(readlink -f "$0")")" && pwd)"
CONFIG=/usr/local/etc/xray/config.json

show_help() {
  echo ""
  echo "üß≠ Xray CLI"
  echo ""
  echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:"
  echo "  ./cli.sh install     ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∫–∞ Xray (VLESS + REALITY)"
  echo "  ./cli.sh add         ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞"
  echo "  ./cli.sh list        ‚Äî —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤"
  echo "  ./cli.sh remove      ‚Äî —É–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞"
  echo "  ./cli.sh restart     ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å"
  echo "  ./cli.sh config      ‚Äî —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"
  echo "  ./cli.sh log         ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏"
  echo "  ./cli.sh status      ‚Äî —Å—Ç–∞—Ç—É—Å xray"
  echo ""
}

install() {
  read -p "–í–≤–µ–¥–∏—Ç–µ –ø–æ—Ä—Ç –¥–ª—è Xray [–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 8443]: " PORT
  PORT=${PORT:-8443}

  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–∞ –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å
  if ! [[ "$PORT" =~ ^[0-9]+$ ]]; then
    echo "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ—Ä—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ."
    exit 1
  fi

  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–ª—é—á–∏
  if [ -f /etc/xray/private.key ] || [ -f /etc/xray/public.key ]; then
    echo "‚ùå –ö–ª—é—á–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç. –ü–µ—Ä–µ–∑–∞–ø–∏—Å—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞."
    echo "rm /etc/xray/private.key /etc/xray/public.key"
    exit 1
  fi

  echo "üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Xray-core..."
  bash <(curl -Ls https://github.com/XTLS/Xray-install/raw/main/install-release.sh)

  echo "üîê –ì–µ–Ω–µ—Ä–∞—Ü–∏—è X25519 –∫–ª—é—á–µ–π..."
  KEYS=$(xray x25519)
  PRIVATE_KEY=$(echo "$KEYS" | grep "Private key" | awk '{print $3}')
  PUBLIC_KEY=$(echo "$KEYS" | grep "Public key" | awk '{print $3}')
  SHORT_ID=$(openssl rand -hex 4)

  mkdir -p /etc/xray
  echo "$PRIVATE_KEY" > /etc/xray/private.key
  echo "$PUBLIC_KEY" > /etc/xray/public.key

  cat <<EOF > $CONFIG
{
  "inbounds": [
    {
      "port": $PORT,
      "protocol": "vless",
      "settings": {
        "clients": [],
        "decryption": "none"
      },
      "streamSettings": {
        "network": "tcp",
        "security": "reality",
        "realitySettings": {
          "show": false,
          "dest": "cdn.jsdelivr.net:443",
          "xver": 0,
          "serverNames": ["cdn.jsdelivr.net"],
          "privateKey": "$PRIVATE_KEY",
          "shortIds": ["$SHORT_ID"]
        }
      }
    }
  ],
  "outbounds": [
    {
      "protocol": "freedom"
    }
  ]
}
EOF

  cat <<EOF > /etc/systemd/system/xray.service
[Unit]
Description=Xray REALITY Service
After=network.target

[Service]
ExecStart=/usr/local/bin/xray -config /usr/local/etc/xray/config.json
Restart=on-failure

[Install]
WantedBy=multi-user.target
EOF

  sudo ufw allow $PORT/tcp
  systemctl daemon-reload
  systemctl enable xray
  systemctl restart xray

  echo ""
  echo "‚úÖ Xray —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å REALITY –Ω–∞ –ø–æ—Ä—Ç—É $PORT!"
  echo "Public Key –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞: $PUBLIC_KEY"
  echo "–¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–π ./cli.sh add –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞"
}

check_config() {
  if [ ! -f "$CONFIG" ]; then
    echo "‚ùå –ö–æ–Ω—Ñ–∏–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω: $CONFIG"
    exit 1
  fi

  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è jq
  if ! command -v jq >/dev/null 2>&1; then
    echo "üîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é jq..."
    apt-get update && apt-get install -y jq
  fi
}

list() {
  # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–ª–∏–µ–Ω—Ç–æ–≤
  CLIENTS=$(jq -r '.inbounds[0].settings.clients[] | "\(.email) \(.id)"' "$CONFIG")

  if [ -z "$CLIENTS" ]; then
    echo "ü§∑ –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤."
    return 0
  fi

  echo "üìã –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ Xray:"
  echo "------------------------"
  echo "$CLIENTS" | while read -r line; do
    NAME=$(echo "$line" | awk '{print $1}')
    UUID=$(echo "$line" | awk '{print $2}')
    echo "üë§ $NAME"
    echo "   üîê UUID: $UUID"
  done
}

add() {
  # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
  PORT=$(jq -r '.inbounds[0].port' "$CONFIG")
  SERVER_NAME=$(jq -r '.inbounds[0].streamSettings.realitySettings.serverNames[0]' "$CONFIG")
  SHORT_ID=$(jq -r '.inbounds[0].streamSettings.realitySettings.shortIds[0]' "$CONFIG")
  PUBLIC_KEY=$(cat /etc/xray/public.key)

  UUID=$(cat /proc/sys/kernel/random/uuid)
  read -p "–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: iphone): " NAME

  # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
  TMP=$(mktemp)
  jq ".inbounds[0].settings.clients += [{\"id\":\"$UUID\",\"flow\":\"xtls-rprx-vision\",\"email\":\"$NAME\"}]" "$CONFIG" > "$TMP" && mv "$TMP" "$CONFIG"
  systemctl restart xray

  IP=$(curl -s ipv4.icanhazip.com)
  VLESS_LINK="vless://${UUID}@${IP}:${PORT}?encryption=none&security=reality&fp=chrome&pbk=${PUBLIC_KEY}&sid=${SHORT_ID}&spx=%2F&type=tcp&flow=xtls-rprx-vision&sni=${SERVER_NAME}#${NAME}"

  echo ""
  echo "‚úÖ –ö–ª–∏–µ–Ω—Ç '$NAME' –¥–æ–±–∞–≤–ª–µ–Ω!"
  echo "üì≤ –°—Å—ã–ª–∫–∞ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞:"
  echo "$VLESS_LINK"
}

remove() {
  if [[ "$1" == "--all" ]]; then
    read -p "‚ùó –¢—ã —Ç–æ—á–Ω–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤? [y/N]: " CONFIRM
    if [[ "$CONFIRM" =~ ^[Yy]$ ]]; then
      TMP=$(mktemp)
      jq '.inbounds[0].settings.clients = []' "$CONFIG" > "$TMP" && mv "$TMP" "$CONFIG"
      systemctl restart xray
      echo "üßπ –í—Å–µ –∫–ª–∏–µ–Ω—Ç—ã —É–¥–∞–ª–µ–Ω—ã."
    else
      echo "üö´ –û—Ç–º–µ–Ω–µ–Ω–æ."
    fi
    return
  fi

  if [ "$#" -lt 1 ]; then
    read -p "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: iphone): " NAME
    set -- "$NAME"
  fi

  for CLIENT_NAME in "$@"; do
    EXISTS=$(jq -r --arg name "$CLIENT_NAME" '.inbounds[0].settings.clients[] | select(.email == $name)' "$CONFIG")

    if [ -z "$EXISTS" ]; then
      echo "‚ö†Ô∏è  –ö–ª–∏–µ–Ω—Ç '$CLIENT_NAME' –Ω–µ –Ω–∞–π–¥–µ–Ω."
    else
      TMP=$(mktemp)
      jq --arg name "$CLIENT_NAME" '(.inbounds[0].settings.clients) |= map(select(.email != $name))' "$CONFIG" > "$TMP" && mv "$TMP" "$CONFIG"
      echo "üóëÔ∏è –ö–ª–∏–µ–Ω—Ç '$CLIENT_NAME' —É–¥–∞–ª—ë–Ω."
    fi
  done

  systemctl restart xray
}

case "$COMMAND" in
  install)
    install
    ;;
  list)
    check_config;
    list
    ;;
  add)
    list;
    add
    ;;
  remove)
    check_config
    list
    shift
    remove "$@"
    ;;
  restart)
    systemctl restart xray
    ;;
  config)
    nano $CONFIG && systemctl restart xray
    ;;
  log)
    journalctl -u xray -e
    ;;
  status)
    systemctl status xray
    ;;
  *)
    show_help
    ;;
esac
